import jenkins.model.Jenkins
import hudson.FilePath
@Library ('infra-paas-starter-lib@v6.3.0')
import com.telus.paas.starter.*
import com.telus.paas.starter.util.*
import com.telus.paas.starter.stage.*

def checkoutStage = new Checkout()
def deployStage = new Deploy()
def prompt = new Prompt()
def integrationTestStage = new IntegrationTest()
def crqStage = new Crq()

//Notification, recpientList needs to be outside of try block for use in catch
def recipientList
def tag = 'latest'
try {
  // Variables
  currentBuild.result = 'SUCCESS'
  node {
    stage('Checkout') {
      skipImageGeneration = true
      checkoutStage.doCheckout(skipImageGeneration)
      recipientList = checkoutStage.recipientList
      echo "jenkins recipientList: ${recipientList}"
    }
    try {     // allow pipeline to continue if stage fails
      stage('Create NP CRQ') {
        crqStage.createCrqNonProd(recipientList)
      }
    } catch (err) {
      echo(err.toString())
    }

    // Deploy to PT ?
    stage ('Select PT Env') {
      environments = prompt.deployPTCheckbox(recipientList)
      deployStage.setup()
    }

    // Select Image
    stage ('Select Image') {
      imageTag = prompt.selectImageTagPrompt(recipientList)
      tag = imageTag
    }

    // cannot loop (for item in list) due to not serializable exception
    envList = environments.split(",")
    for (int i=0; i<envList.size(); i++) {
      environment = envList[i]
      stage("Deploying to ${environment}") {
        deployStage.deployPT(tag, recipientList, environment)
      }
      stage("Integration Test") {
        //integrationTestStage.doIntegrationTest(environment)  
      }
    }
  }
}
catch (err) {
  echo ("Attempting to send errorMessage to ${recipientList}")
  def notificationUtil = new NotificationUtil()
  notificationUtil.sendErrorMessage(recipientList)
  currentBuild.result = 'FAILURE'
  throw err
}
