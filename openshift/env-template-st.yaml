apiVersion: v1
kind: Template
metadata:
  annotations:
    iconClass: icon-java
  name: ${APPLICATION_NAME}-${APPLICATION_VERSION}-${ENV}
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}-${APPLICATION_VERSION}-${ENV}
    labels:
      application: ${APPLICATION_NAME}-${ENV}
      version: ${APPLICATION_VERSION}
      app: ${APPLICATION_NAME}-${ENV}
      env: ${ENV}
  spec:
    revisionHistoryLimit: 5
    replicas: "${{REPLICAS}}"
    selector:
      deploymentconfig: ${APPLICATION_NAME}-${APPLICATION_VERSION}-${ENV}
    strategy:
      resources: {}
      type: Rolling
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}-${ENV}
          deploymentconfig: ${APPLICATION_NAME}-${APPLICATION_VERSION}-${ENV}
          version: ${APPLICATION_VERSION}
        name: ${APPLICATION_NAME}-${APPLICATION_VERSION}-${ENV}
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: dynatrace
                      operator: In
                      values:
                        - 'on'
        containers:
        - env:
          - name: JAVA_MAX_MEM_RATIO
            value: '75'
          - name: AB_JOLOKIA_OFF
            value: "false"
          - name: JAVA_ARGS
            value: '--spring.config.location=file:/etc/paas-config/ --spring.profiles.active=${APPLICATION_PROFILES}'
          - name: JAVA_OPTIONS
            value: -Djava.security.egd=file:/dev/./urandom -XX:+TieredCompilation -XX:TieredStopAtLevel=1
          image: ${APPLICATION_NAME}-${BRANCH_NAME}:${APPLICATION_VERSION}-${ENV}
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /${APPLICATION_VERSION}/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          name: ${APPLICATION_NAME}-${APPLICATION_VERSION}-${ENV}
          ports:
          - containerPort: 8080
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /${APPLICATION_VERSION}/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 768Mi
              cpu: 250m
            requests:
              memory: 512Mi
              cpu: 50m
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 75
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}-${APPLICATION_VERSION}-${ENV}
        from:
          kind: ImageStreamTag
          namespace: ${PROJECT_NAMESPACE}
          name: ${APPLICATION_NAME}-${BRANCH_NAME}:${APPLICATION_VERSION}-${ENV}
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}-${ENV}
      application: ${APPLICATION_NAME}-${ENV}
      version: ${APPLICATION_VERSION}
      env: ${ENV}
    name: ${APPLICATION_NAME}-${APPLICATION_VERSION}-${ENV}
  spec:
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: ${APPLICATION_NAME}-${APPLICATION_VERSION}-${ENV}
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      application: ${APPLICATION_NAME}-${ENV}
      version: ${APPLICATION_VERSION}
      app: ${APPLICATION_NAME}-${ENV}
      env: ${ENV}
    name: ${APPLICATION_NAME}-${APPLICATION_VERSION}-${ENV}
  spec:
    host: ${APPLICATION_NAME}${ROUTE_ENV}.${OS_HOST}
    path: /${APPLICATION_VERSION}
    to:
      kind: Service
      name: ${APPLICATION_NAME}-${APPLICATION_VERSION}-${ENV}
      weight: 100
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      application: ${APPLICATION_NAME}-${ENV}
      version: ${APPLICATION_VERSION}
      app: ${APPLICATION_NAME}-${ENV}
      env: ${ENV}      
    name: ${APPLICATION_NAME}-${APPLICATION_VERSION}-${ENV}-gtm
  spec:
    host: ${APPLICATION_NAME}${ROUTE_ENV}.${GTM_HOST}
    path: /${APPLICATION_VERSION}
    to:
      kind: Service
      name: ${APPLICATION_NAME}-${APPLICATION_VERSION}-${ENV}
      weight: 100
parameters:
- displayName: Application name
  name: APPLICATION_NAME
  required: true
- displayName: Application version
  name: APPLICATION_VERSION
  required: true
- displayName: Branch name
  name: BRANCH_NAME
  required: true
  value: "lapish"
- displayName: Environment name
  name: ENV
  required: true
- displayName: Route environment name
  name: ROUTE_ENV
  required: false
  description: Equivalent to ENV, but proceeded by a hyphen to support PROD standard of not suffixing routes.
- displayName: Project namespace
  name: PROJECT_NAMESPACE
  required: true
- displayName: Number of Replicas
  name: REPLICAS
  required: true
  value: "2"
- displayName: OpenShift Host Name
  name: OS_HOST
  required: true
  value: "paas-app-${OS_HOST}.tsl.telus.com"
- displayName: OpenShift GTM Host Name
  name: GTM_HOST
  required: true
  value: "paas-app-np.tsl.telus.com"
- displayName: Application Profiles
  name: APPLICATION_PROFILES
  required: true
  description: One or more comma separated profiles to start spring context
